// This file is auto-generated by @hey-api/openapi-ts

export type AppointmentCreate = {
    user_id: number;
    barber_id: number;
    status: AppointmentStatus;
    time_slot: Array<number>;
    service_id: Array<number>;
};

export type AppointmentResponse = {
    appointment_id: number;
    appointment_date: string;
    user: UserResponse;
    barber: BarberResponse;
    status: AppointmentStatus;
    time_slots: Array<TimeSlotChildResponse>;
    services: Array<ServiceResponse>;
};

export type AppointmentStatus = 'pending' | 'confirmed' | 'completed' | 'cancelled';

export type AppointmentUpdate = {
    user_id?: number | null;
    barber_id?: number | null;
    status?: AppointmentStatus | null;
    time_slot?: Array<number> | null;
    service_id?: Array<number> | null;
};

export type BarberCreate = {
    user_id: number;
};

export type BarberResponse = {
    barber_id: number;
    user: UserBase;
};

export type BodyLoginApiV1AuthLoginPost = {
    username: string;
    password: string;
};

export type EmailSchema = {
    email: string;
    subject: string;
    body: string;
};

export type ErrorResponse = {
    detail: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type MessageActiveUpdate = {
    hasActiveMessage: boolean;
};

export type MessageCreate = {
    thread_id: number;
    hasActiveMessage: boolean;
    text: string;
};

export type MessageResponse = {
    thread_id: number;
    hasActiveMessage: boolean;
    text: string;
    message_id: number;
    timeStamp: string;
};

export type ScheduleCreate = {
    barber_id: number;
    date: string;
    is_working?: boolean | null;
    time_slots: Array<TimeSlotCreate>;
};

export type ScheduleResponse = {
    barber_id: number;
    date: string;
    is_working: boolean;
    time_slots: Array<TimeSlotChildResponse>;
    schedule_id: number;
    barber: BarberResponse;
};

export type ScheduleUpdate = {
    barber_id?: number | null;
    date?: string | null;
    is_working?: boolean | null;
    time_slots?: Array<TimeSlotUpdate> | null;
};

export type ServiceBase = {
    name: string;
    duration: number;
    price: number | string;
    category: string;
    description: string;
    popularity_score: number;
};

export type ServiceResponse = {
    name: string;
    duration: number;
    price: string;
    category: string;
    description: string;
    popularity_score: number;
    service_id: number;
};

export type ServiceUpdate = {
    name?: string | null;
    duration?: number | null;
    price?: number | string;
    category?: string | null;
    description?: string | null;
    popularity_score?: string | null;
};

export type ThreadCreate = {
    receivingUser: number;
    sendingUser: number;
};

export type ThreadResponse = {
    receivingUser: number;
    sendingUser: number;
    thread_id: number;
    messages?: Array<MessageResponse> | null;
};

export type TimeSlotChildResponse = {
    slot_id: number;
    start_time: string;
    end_time: string;
    is_available: boolean;
    is_booked: boolean;
};

export type TimeSlotCreate = {
    schedule_id?: number | null;
    start_time: string;
    end_time: string;
    is_available?: boolean | null;
};

export type TimeSlotUpdate = {
    slot_id: number;
    schedule_id?: number | null;
    start_time?: string | null;
    end_time?: string | null;
    is_available?: boolean | null;
};

export type TokenResponse = {
    access_token: string;
    token_type?: string;
};

export type UserBase = {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    is_admin?: boolean;
};

export type UserCreate = {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    is_admin?: boolean;
    password: string;
};

export type UserResponse = {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    is_admin?: boolean;
    user_id: number;
    roles?: Array<string> | null;
};

export type UserUpdate = {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    is_admin?: boolean | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type LoginApiV1AuthLoginPostData = {
    body: BodyLoginApiV1AuthLoginPost;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginApiV1AuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginApiV1AuthLoginPostError = LoginApiV1AuthLoginPostErrors[keyof LoginApiV1AuthLoginPostErrors];

export type LoginApiV1AuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type LoginApiV1AuthLoginPostResponse = LoginApiV1AuthLoginPostResponses[keyof LoginApiV1AuthLoginPostResponses];

export type SendEmailApiV1EmailSendPostData = {
    body: EmailSchema;
    path?: never;
    query?: never;
    url: '/api/v1/email/send';
};

export type SendEmailApiV1EmailSendPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An error occurred while sending the email.
     */
    500: ErrorResponse;
};

export type SendEmailApiV1EmailSendPostError = SendEmailApiV1EmailSendPostErrors[keyof SendEmailApiV1EmailSendPostErrors];

export type SendEmailApiV1EmailSendPostResponses = {
    /**
     * Email has been sent successfully.
     */
    200: unknown;
};

export type GetUsersApiV1UsersGetData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/v1/users';
};

export type GetUsersApiV1UsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUsersApiV1UsersGetError = GetUsersApiV1UsersGetErrors[keyof GetUsersApiV1UsersGetErrors];

export type GetUsersApiV1UsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserResponse>;
};

export type GetUsersApiV1UsersGetResponse = GetUsersApiV1UsersGetResponses[keyof GetUsersApiV1UsersGetResponses];

export type CreateUserApiV1UsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users';
};

export type CreateUserApiV1UsersPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateUserApiV1UsersPostError = CreateUserApiV1UsersPostErrors[keyof CreateUserApiV1UsersPostErrors];

export type CreateUserApiV1UsersPostResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type CreateUserApiV1UsersPostResponse = CreateUserApiV1UsersPostResponses[keyof CreateUserApiV1UsersPostResponses];

export type GetCurrentUserApiV1UsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type GetCurrentUserApiV1UsersMeGetErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetCurrentUserApiV1UsersMeGetError = GetCurrentUserApiV1UsersMeGetErrors[keyof GetCurrentUserApiV1UsersMeGetErrors];

export type GetCurrentUserApiV1UsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type GetCurrentUserApiV1UsersMeGetResponse = GetCurrentUserApiV1UsersMeGetResponses[keyof GetCurrentUserApiV1UsersMeGetResponses];

export type DeleteUserApiV1UsersUserIdDeleteData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type DeleteUserApiV1UsersUserIdDeleteErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteUserApiV1UsersUserIdDeleteError = DeleteUserApiV1UsersUserIdDeleteErrors[keyof DeleteUserApiV1UsersUserIdDeleteErrors];

export type DeleteUserApiV1UsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteUserApiV1UsersUserIdDeleteResponse = DeleteUserApiV1UsersUserIdDeleteResponses[keyof DeleteUserApiV1UsersUserIdDeleteResponses];

export type GetUserApiV1UsersUserIdGetData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type GetUserApiV1UsersUserIdGetErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserApiV1UsersUserIdGetError = GetUserApiV1UsersUserIdGetErrors[keyof GetUserApiV1UsersUserIdGetErrors];

export type GetUserApiV1UsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type GetUserApiV1UsersUserIdGetResponse = GetUserApiV1UsersUserIdGetResponses[keyof GetUserApiV1UsersUserIdGetResponses];

export type UpdateUserApiV1UsersUserIdPutData = {
    body: UserUpdate;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UpdateUserApiV1UsersUserIdPutErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateUserApiV1UsersUserIdPutError = UpdateUserApiV1UsersUserIdPutErrors[keyof UpdateUserApiV1UsersUserIdPutErrors];

export type UpdateUserApiV1UsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type UpdateUserApiV1UsersUserIdPutResponse = UpdateUserApiV1UsersUserIdPutResponses[keyof UpdateUserApiV1UsersUserIdPutResponses];

export type GetAllBarbersApiV1BarbersGetData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
        /**
         * Date to filter barbers by schedule
         */
        schedule_date?: string | null;
    };
    url: '/api/v1/barbers';
};

export type GetAllBarbersApiV1BarbersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllBarbersApiV1BarbersGetError = GetAllBarbersApiV1BarbersGetErrors[keyof GetAllBarbersApiV1BarbersGetErrors];

export type GetAllBarbersApiV1BarbersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<BarberResponse>;
};

export type GetAllBarbersApiV1BarbersGetResponse = GetAllBarbersApiV1BarbersGetResponses[keyof GetAllBarbersApiV1BarbersGetResponses];

export type CreateBarberApiV1BarbersPostData = {
    body: BarberCreate;
    path?: never;
    query?: never;
    url: '/api/v1/barbers';
};

export type CreateBarberApiV1BarbersPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateBarberApiV1BarbersPostError = CreateBarberApiV1BarbersPostErrors[keyof CreateBarberApiV1BarbersPostErrors];

export type CreateBarberApiV1BarbersPostResponses = {
    /**
     * Successful Response
     */
    200: BarberResponse;
};

export type CreateBarberApiV1BarbersPostResponse = CreateBarberApiV1BarbersPostResponses[keyof CreateBarberApiV1BarbersPostResponses];

export type GetBarberByIdApiV1BarbersBarberIdGetData = {
    body?: never;
    path: {
        barber_id: number;
    };
    query?: never;
    url: '/api/v1/barbers/{barber_id}';
};

export type GetBarberByIdApiV1BarbersBarberIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetBarberByIdApiV1BarbersBarberIdGetError = GetBarberByIdApiV1BarbersBarberIdGetErrors[keyof GetBarberByIdApiV1BarbersBarberIdGetErrors];

export type GetBarberByIdApiV1BarbersBarberIdGetResponses = {
    /**
     * Successful Response
     */
    200: BarberResponse;
};

export type GetBarberByIdApiV1BarbersBarberIdGetResponse = GetBarberByIdApiV1BarbersBarberIdGetResponses[keyof GetBarberByIdApiV1BarbersBarberIdGetResponses];

export type GetAllServicesApiV1ServicesGetData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/v1/services';
};

export type GetAllServicesApiV1ServicesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllServicesApiV1ServicesGetError = GetAllServicesApiV1ServicesGetErrors[keyof GetAllServicesApiV1ServicesGetErrors];

export type GetAllServicesApiV1ServicesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ServiceResponse>;
};

export type GetAllServicesApiV1ServicesGetResponse = GetAllServicesApiV1ServicesGetResponses[keyof GetAllServicesApiV1ServicesGetResponses];

export type CreateServiceApiV1ServicesPostData = {
    body: ServiceBase;
    path?: never;
    query?: never;
    url: '/api/v1/services';
};

export type CreateServiceApiV1ServicesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateServiceApiV1ServicesPostError = CreateServiceApiV1ServicesPostErrors[keyof CreateServiceApiV1ServicesPostErrors];

export type CreateServiceApiV1ServicesPostResponses = {
    /**
     * Successful Response
     */
    200: ServiceResponse;
};

export type CreateServiceApiV1ServicesPostResponse = CreateServiceApiV1ServicesPostResponses[keyof CreateServiceApiV1ServicesPostResponses];

export type DeleteServiceApiV1ServicesServiceIdDeleteData = {
    body?: never;
    path: {
        service_id: number;
    };
    query?: never;
    url: '/api/v1/services/{service_id}';
};

export type DeleteServiceApiV1ServicesServiceIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteServiceApiV1ServicesServiceIdDeleteError = DeleteServiceApiV1ServicesServiceIdDeleteErrors[keyof DeleteServiceApiV1ServicesServiceIdDeleteErrors];

export type DeleteServiceApiV1ServicesServiceIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteServiceApiV1ServicesServiceIdDeleteResponse = DeleteServiceApiV1ServicesServiceIdDeleteResponses[keyof DeleteServiceApiV1ServicesServiceIdDeleteResponses];

export type UpdateServiceApiV1ServicesServiceIdPutData = {
    body: ServiceUpdate;
    path: {
        service_id: number;
    };
    query?: never;
    url: '/api/v1/services/{service_id}';
};

export type UpdateServiceApiV1ServicesServiceIdPutErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateServiceApiV1ServicesServiceIdPutError = UpdateServiceApiV1ServicesServiceIdPutErrors[keyof UpdateServiceApiV1ServicesServiceIdPutErrors];

export type UpdateServiceApiV1ServicesServiceIdPutResponses = {
    /**
     * Successful Response
     */
    200: ServiceResponse;
};

export type UpdateServiceApiV1ServicesServiceIdPutResponse = UpdateServiceApiV1ServicesServiceIdPutResponses[keyof UpdateServiceApiV1ServicesServiceIdPutResponses];

export type GetSchedulesApiV1SchedulesGetData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
        /**
         * Date to filter barbers by schedule
         */
        schedule_date?: string | null;
        /**
         * Barber ID to filter schedules by
         */
        barber_id?: number | null;
    };
    url: '/api/v1/schedules';
};

export type GetSchedulesApiV1SchedulesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetSchedulesApiV1SchedulesGetError = GetSchedulesApiV1SchedulesGetErrors[keyof GetSchedulesApiV1SchedulesGetErrors];

export type GetSchedulesApiV1SchedulesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ScheduleResponse>;
};

export type GetSchedulesApiV1SchedulesGetResponse = GetSchedulesApiV1SchedulesGetResponses[keyof GetSchedulesApiV1SchedulesGetResponses];

export type CreateScheduleApiV1SchedulesPostData = {
    body: ScheduleCreate;
    path?: never;
    query?: never;
    url: '/api/v1/schedules';
};

export type CreateScheduleApiV1SchedulesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateScheduleApiV1SchedulesPostError = CreateScheduleApiV1SchedulesPostErrors[keyof CreateScheduleApiV1SchedulesPostErrors];

export type CreateScheduleApiV1SchedulesPostResponses = {
    /**
     * Successful Response
     */
    200: ScheduleResponse;
};

export type CreateScheduleApiV1SchedulesPostResponse = CreateScheduleApiV1SchedulesPostResponses[keyof CreateScheduleApiV1SchedulesPostResponses];

export type DeleteScheduleApiV1SchedulesScheduleIdDeleteData = {
    body?: never;
    path: {
        schedule_id: number;
    };
    query?: never;
    url: '/api/v1/schedules/{schedule_id}';
};

export type DeleteScheduleApiV1SchedulesScheduleIdDeleteErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteScheduleApiV1SchedulesScheduleIdDeleteError = DeleteScheduleApiV1SchedulesScheduleIdDeleteErrors[keyof DeleteScheduleApiV1SchedulesScheduleIdDeleteErrors];

export type DeleteScheduleApiV1SchedulesScheduleIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteScheduleApiV1SchedulesScheduleIdDeleteResponse = DeleteScheduleApiV1SchedulesScheduleIdDeleteResponses[keyof DeleteScheduleApiV1SchedulesScheduleIdDeleteResponses];

export type GetScheduleApiV1SchedulesScheduleIdGetData = {
    body?: never;
    path: {
        schedule_id: number;
    };
    query?: never;
    url: '/api/v1/schedules/{schedule_id}';
};

export type GetScheduleApiV1SchedulesScheduleIdGetErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetScheduleApiV1SchedulesScheduleIdGetError = GetScheduleApiV1SchedulesScheduleIdGetErrors[keyof GetScheduleApiV1SchedulesScheduleIdGetErrors];

export type GetScheduleApiV1SchedulesScheduleIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScheduleResponse;
};

export type GetScheduleApiV1SchedulesScheduleIdGetResponse = GetScheduleApiV1SchedulesScheduleIdGetResponses[keyof GetScheduleApiV1SchedulesScheduleIdGetResponses];

export type UpdateScheduleApiV1SchedulesScheduleIdPutData = {
    body: ScheduleUpdate;
    path: {
        schedule_id: number;
    };
    query?: never;
    url: '/api/v1/schedules/{schedule_id}';
};

export type UpdateScheduleApiV1SchedulesScheduleIdPutErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateScheduleApiV1SchedulesScheduleIdPutError = UpdateScheduleApiV1SchedulesScheduleIdPutErrors[keyof UpdateScheduleApiV1SchedulesScheduleIdPutErrors];

export type UpdateScheduleApiV1SchedulesScheduleIdPutResponses = {
    /**
     * Successful Response
     */
    200: ScheduleResponse;
};

export type UpdateScheduleApiV1SchedulesScheduleIdPutResponse = UpdateScheduleApiV1SchedulesScheduleIdPutResponses[keyof UpdateScheduleApiV1SchedulesScheduleIdPutResponses];

export type GetAppointmentsApiV1AppointmentsGetData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/api/v1/appointments';
};

export type GetAppointmentsApiV1AppointmentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAppointmentsApiV1AppointmentsGetError = GetAppointmentsApiV1AppointmentsGetErrors[keyof GetAppointmentsApiV1AppointmentsGetErrors];

export type GetAppointmentsApiV1AppointmentsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<AppointmentResponse>;
};

export type GetAppointmentsApiV1AppointmentsGetResponse = GetAppointmentsApiV1AppointmentsGetResponses[keyof GetAppointmentsApiV1AppointmentsGetResponses];

export type CreateAppointmentApiV1AppointmentsPostData = {
    body: AppointmentCreate;
    path?: never;
    query?: never;
    url: '/api/v1/appointments';
};

export type CreateAppointmentApiV1AppointmentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateAppointmentApiV1AppointmentsPostError = CreateAppointmentApiV1AppointmentsPostErrors[keyof CreateAppointmentApiV1AppointmentsPostErrors];

export type CreateAppointmentApiV1AppointmentsPostResponses = {
    /**
     * Successful Response
     */
    200: AppointmentResponse;
};

export type CreateAppointmentApiV1AppointmentsPostResponse = CreateAppointmentApiV1AppointmentsPostResponses[keyof CreateAppointmentApiV1AppointmentsPostResponses];

export type DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteData = {
    body?: never;
    path: {
        appointment_id: number;
    };
    query?: never;
    url: '/api/v1/appointments/{appointment_id}';
};

export type DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteError = DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteErrors[keyof DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteErrors];

export type DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteResponse = DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteResponses[keyof DeleteAppointmentApiV1AppointmentsAppointmentIdDeleteResponses];

export type GetAppointmentApiV1AppointmentsAppointmentIdGetData = {
    body?: never;
    path: {
        appointment_id: number;
    };
    query?: never;
    url: '/api/v1/appointments/{appointment_id}';
};

export type GetAppointmentApiV1AppointmentsAppointmentIdGetErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAppointmentApiV1AppointmentsAppointmentIdGetError = GetAppointmentApiV1AppointmentsAppointmentIdGetErrors[keyof GetAppointmentApiV1AppointmentsAppointmentIdGetErrors];

export type GetAppointmentApiV1AppointmentsAppointmentIdGetResponses = {
    /**
     * Successful Response
     */
    200: AppointmentResponse;
};

export type GetAppointmentApiV1AppointmentsAppointmentIdGetResponse = GetAppointmentApiV1AppointmentsAppointmentIdGetResponses[keyof GetAppointmentApiV1AppointmentsAppointmentIdGetResponses];

export type UpdateAppointmentApiV1AppointmentsAppointmentIdPutData = {
    body: AppointmentUpdate;
    path: {
        appointment_id: number;
    };
    query?: never;
    url: '/api/v1/appointments/{appointment_id}';
};

export type UpdateAppointmentApiV1AppointmentsAppointmentIdPutErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateAppointmentApiV1AppointmentsAppointmentIdPutError = UpdateAppointmentApiV1AppointmentsAppointmentIdPutErrors[keyof UpdateAppointmentApiV1AppointmentsAppointmentIdPutErrors];

export type UpdateAppointmentApiV1AppointmentsAppointmentIdPutResponses = {
    /**
     * Successful Response
     */
    200: AppointmentResponse;
};

export type UpdateAppointmentApiV1AppointmentsAppointmentIdPutResponse = UpdateAppointmentApiV1AppointmentsAppointmentIdPutResponses[keyof UpdateAppointmentApiV1AppointmentsAppointmentIdPutResponses];

export type CreateThreadApiV1ThreadsPostData = {
    body: ThreadCreate;
    path?: never;
    query?: never;
    url: '/api/v1/threads';
};

export type CreateThreadApiV1ThreadsPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateThreadApiV1ThreadsPostError = CreateThreadApiV1ThreadsPostErrors[keyof CreateThreadApiV1ThreadsPostErrors];

export type CreateThreadApiV1ThreadsPostResponses = {
    /**
     * Successful Response
     */
    200: ThreadResponse;
};

export type CreateThreadApiV1ThreadsPostResponse = CreateThreadApiV1ThreadsPostResponses[keyof CreateThreadApiV1ThreadsPostResponses];

export type GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetData = {
    body?: never;
    path: {
        logged_user_id: number;
        other_user_id: number;
    };
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/v1/threads/{logged_user_id}/and/{other_user_id}';
};

export type GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetError = GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetErrors[keyof GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetErrors];

export type GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ThreadResponse>;
};

export type GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetResponse = GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetResponses[keyof GetThreadsByUserIdApiV1ThreadsLoggedUserIdAndOtherUserIdGetResponses];

export type GetAllThreadsByUserIdApiV1ThreadsUserIdGetData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/v1/threads/{user_id}';
};

export type GetAllThreadsByUserIdApiV1ThreadsUserIdGetErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllThreadsByUserIdApiV1ThreadsUserIdGetError = GetAllThreadsByUserIdApiV1ThreadsUserIdGetErrors[keyof GetAllThreadsByUserIdApiV1ThreadsUserIdGetErrors];

export type GetAllThreadsByUserIdApiV1ThreadsUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ThreadResponse>;
};

export type GetAllThreadsByUserIdApiV1ThreadsUserIdGetResponse = GetAllThreadsByUserIdApiV1ThreadsUserIdGetResponses[keyof GetAllThreadsByUserIdApiV1ThreadsUserIdGetResponses];

export type CreateMessageApiV1MessagesPostData = {
    body: MessageCreate;
    path?: never;
    query?: never;
    url: '/api/v1/messages';
};

export type CreateMessageApiV1MessagesPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateMessageApiV1MessagesPostError = CreateMessageApiV1MessagesPostErrors[keyof CreateMessageApiV1MessagesPostErrors];

export type CreateMessageApiV1MessagesPostResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type CreateMessageApiV1MessagesPostResponse = CreateMessageApiV1MessagesPostResponses[keyof CreateMessageApiV1MessagesPostResponses];

export type UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutData = {
    body: MessageActiveUpdate;
    path: {
        message_id: number;
    };
    query?: never;
    url: '/api/v1/messages/{message_id}';
};

export type UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutError = UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutErrors[keyof UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutErrors];

export type UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutResponses = {
    /**
     * Successful Response
     */
    200: MessageResponse;
};

export type UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutResponse = UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutResponses[keyof UpdateHasActiveMessageBooleanApiV1MessagesMessageIdPutResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootHealthzGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/healthz';
};

export type RootHealthzGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};